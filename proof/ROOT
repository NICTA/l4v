(*
 * Copyright 2014, General Dynamics C4 Systems
 *
 * SPDX-License-Identifier: GPL-2.0-only
 *)

chapter "Proofs"

(*
 * List of rules to make various images.
 *
 * Some rules have duplicate targets of the form:
 *
 *    theories [condition = "MOO", quick_and_dirty]
 *       "foo"
 *    theories
 *       "foo"
 *
 * The idea is that if the environment variable "MOO" is defined we
 * execute the first rule (doing the proof in quick-and-dirty mode), and
 * then find we need not take any action for the second. Otherwise, we
 * skip the first rule and only perform the second.
 *)

(*
 * Refinement proof.
 *)

session Refine = BaseRefine +
  description \<open>Refinement between Haskell and Abstract spec.\<close>
  sessions
    Lib
    CorresK
    AInvs
  theories [condition = "REFINE_QUICK_AND_DIRTY", quick_and_dirty]
    "refine/$L4V_ARCH/Refine"
    "refine/$L4V_ARCH/RAB_FN"
    "refine/$L4V_ARCH/EmptyFail_H"
  theories [condition = "SKIP_REFINE_PROOFS", quick_and_dirty, skip_proofs]
    "refine/$L4V_ARCH/Refine"
    "refine/$L4V_ARCH/RAB_FN"
    "refine/$L4V_ARCH/EmptyFail_H"
  theories
    "refine/$L4V_ARCH/Refine"
    "refine/$L4V_ARCH/RAB_FN"
    "refine/$L4V_ARCH/EmptyFail_H"

(*
 * This theory is in a separate session because the proofs currently
 * only work for ARM.
 *)
session RefineOrphanage = Refine +
  description \<open>Proof that the kernel does not orphan threads.\<close>
  theories
    "refine/$L4V_ARCH/Orphanage"

session BaseRefine2 = BaseRefine +
  description \<open>Intermediate point in refinement proof. Useful for machines with small RAM.\<close>
  theories [condition = "SKIP_AINVS_PROOFS", quick_and_dirty, skip_proofs]
    "refine/$L4V_ARCH/Untyped_R"
    "refine/$L4V_ARCH/Schedule_R"
  theories
   "refine/$L4V_ARCH/Untyped_R"
   "refine/$L4V_ARCH/Schedule_R"

session BaseRefine = AInvs +
  description \<open>Background theory and libraries for refinement proof.\<close>
  sessions
    Lib
    CorresK
  theories
    "refine/$L4V_ARCH/Include"

session AInvs = ASpec +
  theories [condition = "SKIP_AINVS_PROOFS", quick_and_dirty, skip_proofs]
    "invariant-abstract/KernelInit_AI"
    "invariant-abstract/$L4V_ARCH/ArchDetSchedSchedule_AI"
  theories [condition = "AINVS_QUICK_AND_DIRTY", quick_and_dirty]
    "invariant-abstract/KernelInit_AI"
    "invariant-abstract/$L4V_ARCH/ArchDetSchedSchedule_AI"
  theories
    "invariant-abstract/KernelInit_AI"
    "invariant-abstract/$L4V_ARCH/ArchDetSchedSchedule_AI"

(*
 * C Refinement proof.
 *)

session CRefineSyscall = CBaseRefine +
  theories [condition = "CREFINE_QUICK_AND_DIRTY", quick_and_dirty]
    "crefine/$L4V_ARCH/Syscall_C"
  theories
    "crefine/$L4V_ARCH/Syscall_C"

session CRefine = CBaseRefine +
  theories [condition = "CREFINE_QUICK_AND_DIRTY", quick_and_dirty]
    "crefine/$L4V_ARCH/Refine_C"
  theories [quick_and_dirty]
    "crefine/$L4V_ARCH/Refine_C"

session CBaseRefine = CSpec +
  sessions
    CLib
    Refine
    AutoCorres
  theories [condition = "SKIP_DUPLICATED_PROOFS", quick_and_dirty, skip_proofs]
    (* crefine/lib/AutoCorres_C explains why L4VerifiedLinks is included here. *)
    "crefine/lib/L4VerifiedLinks"
    "crefine/Include_C"
  theories
    "crefine/lib/L4VerifiedLinks"
    "crefine/Include_C"

session AutoCorresCRefine = CRefine +
  theories
    "crefine/$L4V_ARCH/AutoCorresTest"

(*
 * CapDL Refinement
 *)

session DBaseRefine = AInvs +
  sessions
    DSpec
  theories
    "drefine/Include_D"

session DRefine = DBaseRefine +
  theories
    "drefine/Refine_D"

session DPolicy = DRefine +
  sessions
    Access
  theories
    "access-control/Dpolicy"

(*
 * Infoflow and Access
 *)

session Access in "access-control" = AInvs +
  theories
    "ADT_AC"
    "ExampleSystem"

session InfoFlow in "infoflow" = Access +
  theories
    "InfoFlow_Image_Toplevel"

session InfoFlowCBase = CRefine +
  sessions
    Refine
    Access
    InfoFlow
  theories [condition = "SKIP_DUPLICATED_PROOFS", quick_and_dirty, skip_proofs]
    "infoflow/Include_IF_C"
  theories
    "infoflow/Include_IF_C"

session InfoFlowC = InfoFlowCBase +
  theories
    "infoflow/Noninterference_Refinement"
    "infoflow/Example_Valid_StateH"

(*
 * capDL
 *)

session SepDSpec = DSpec +
  sessions
    Sep_Algebra
    SepTactics
  theories
    "sep-capDL/Frame_SD"

session DSpecProofs in "capDL-api" = SepDSpec +
  sessions
    AInvs
  theories
    "API_DP"

(*
 * Static Separation Kernel Bisimilarity
 *)

session Bisim in bisim = AInvs +
  sessions
    ASepSpec
  theories
    "Syscall_S"
  document_files
    "root.tex"
    "build"
    "Makefile"

(*
 * Separation Logic
 *)

session SepTacticsExamples = SepTactics +
  sessions
    SepDSpec
  theories
    "capDL-api/Sep_Tactic_Examples"


(*
 * Binary Verification Input Step
*)
session SimplExportAndRefine = CSpec +
  theories
    "asmrefine/SEL4SimplExport"
    "asmrefine/SEL4GraphRefine"

session SimplExportOnly = CSpec +
  theories
    "asmrefine/SEL4SimplExport"

(*
 * Libraries
 *)
(* unused:
session AutoLevity = AutoLevity_Base +
  theories
   "../lib/autolevity_buckets/AutoLevity_Top"

session AutoLevity_Base = Word_Lib +
  theories
    "../lib/autolevity_buckets/AutoLevity_Base"
*)
